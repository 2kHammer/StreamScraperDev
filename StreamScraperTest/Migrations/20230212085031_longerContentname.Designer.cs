// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StreamScraperTest.Database;

#nullable disable

namespace StreamScraperTest.Migrations
{
    [DbContext(typeof(StreamScraperContext))]
    [Migration("20230212085031_longerContentname")]
    partial class longerContentname
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContentinformationsCountries", b =>
                {
                    b.Property<int>("ContentinformationId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("ContentinformationId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("ContentinformationsCountries");
                });

            modelBuilder.Entity("ContentinformationsGenres", b =>
                {
                    b.Property<int>("ContentinformationId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("ContentinformationId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("ContentinformationsGenres");
                });

            modelBuilder.Entity("StreamScraperTest.Database.Models.Contentinformations", b =>
                {
                    b.Property<int>("ContentinformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AvailableNetflix")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("ContenttypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeDataScraped")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Fullname")
                        .HasColumnType("char(60)");

                    b.Property<int?>("Lastyear")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("urlPicture")
                        .HasColumnType("longtext");

                    b.HasKey("ContentinformationId");

                    b.HasIndex("ContentId")
                        .IsUnique();

                    b.HasIndex("ContenttypeId");

                    b.ToTable("Contentinformations", (string)null);
                });

            modelBuilder.Entity("StreamScraperTest.Database.Models.Contents", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("ContentId");

                    b.ToTable("Contents", (string)null);
                });

            modelBuilder.Entity("StreamScraperTest.Database.Models.Contenttypes", b =>
                {
                    b.Property<int>("ContenttypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContenttypeDescription")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("ContenttypeId");

                    b.ToTable("Contenttypes", (string)null);
                });

            modelBuilder.Entity("StreamScraperTest.Database.Models.Countries", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("char(20)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("StreamScraperTest.Database.Models.Genres", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("char(30)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("ContentinformationsCountries", b =>
                {
                    b.HasOne("StreamScraperTest.Database.Models.Contentinformations", null)
                        .WithMany()
                        .HasForeignKey("ContentinformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamScraperTest.Database.Models.Countries", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentinformationsGenres", b =>
                {
                    b.HasOne("StreamScraperTest.Database.Models.Contentinformations", null)
                        .WithMany()
                        .HasForeignKey("ContentinformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamScraperTest.Database.Models.Genres", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreamScraperTest.Database.Models.Contentinformations", b =>
                {
                    b.HasOne("StreamScraperTest.Database.Models.Contents", "Content")
                        .WithOne("Contentinformation")
                        .HasForeignKey("StreamScraperTest.Database.Models.Contentinformations", "ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamScraperTest.Database.Models.Contenttypes", "Contenttype")
                        .WithMany("Contentinformations")
                        .HasForeignKey("ContenttypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Contenttype");
                });

            modelBuilder.Entity("StreamScraperTest.Database.Models.Contents", b =>
                {
                    b.Navigation("Contentinformation");
                });

            modelBuilder.Entity("StreamScraperTest.Database.Models.Contenttypes", b =>
                {
                    b.Navigation("Contentinformations");
                });
#pragma warning restore 612, 618
        }
    }
}
